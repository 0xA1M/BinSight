#ifndef ELF_PRINT_H
#define ELF_PRINT_H

#include "core/utils.h"

#include "formats/elf/elf_utils.h"

/* ELF header */
static const LT_Entry machine_names[] = {
    {EM_NONE, "No machine"},
    {EM_M32, "AT&T WE 32100"},
    {EM_SPARC, "SUN SPARC"},
    {EM_386, "Intel 80386"},
    {EM_68K, "Motorola m68k family"},
    {EM_88K, "Motorola m88k family"},
    {EM_IAMCU, "Intel MCU"},
    {EM_860, "Intel 80860"},
    {EM_MIPS, "MIPS R3000 big-endian"},
    {EM_S370, "IBM System/370"},
    {EM_MIPS_RS3_LE, "MIPS R3000 little-endian"},
    {EM_PARISC, "HPPA"},
    {EM_VPP500, "Fujitsu VPP500"},
    {EM_SPARC32PLUS, "SPARC v8plus"},
    {EM_960, "Intel 80960"},
    {EM_PPC, "PowerPC"},
    {EM_PPC64, "PowerPC 64-bit"},
    {EM_S390, "IBM S390"},
    {EM_SPU, "IBM SPU/SPC"},
    {EM_V800, "NEC V800 series"},
    {EM_FR20, "Fujitsu FR20"},
    {EM_RH32, "TRW RH-32"},
    {EM_RCE, "Motorola RCE"},
    {EM_ARM, "ARM"},
    {EM_FAKE_ALPHA, "Digital Alpha"},
    {EM_SH, "Hitachi SH"},
    {EM_SPARCV9, "SPARC v9 64-bit"},
    {EM_TRICORE, "Siemens Tricore"},
    {EM_ARC, "Argonaut RISC Core"},
    {EM_H8_300, "Hitachi H8/300"},
    {EM_H8_300H, "Hitachi H8/300H"},
    {EM_H8S, "Hitachi H8S"},
    {EM_H8_500, "Hitachi H8/500"},
    {EM_IA_64, "Intel Itanium (IA-64)"},
    {EM_MIPS_X, "Stanford MIPS-X"},
    {EM_COLDFIRE, "Motorola Coldfire"},
    {EM_68HC12, "Motorola M68HC12"},
    {EM_MMA, "Fujitsu MMA"},
    {EM_PCP, "Siemens PCP"},
    {EM_NCPU, "Sony nCPU"},
    {EM_NDR1, "Denso NDR1"},
    {EM_STARCORE, "Motorola Star*Core"},
    {EM_ME16, "Toyota ME16"},
    {EM_ST100, "STMicroelectronics ST100"},
    {EM_TINYJ, "Advanced Logic TinyJ"},
    {EM_X86_64, "Advanced Micro Devices X86-64"},
    {EM_PDSP, "Sony DSP"},
    {EM_PDP10, "Digital PDP-10"},
    {EM_PDP11, "Digital PDP-11"},
    {EM_FX66, "Siemens FX66"},
    {EM_ST9PLUS, "STMicroelectronics ST9+"},
    {EM_ST7, "STMicroelectronics ST7"},
    {EM_68HC16, "Motorola MC68HC16"},
    {EM_68HC11, "Motorola MC68HC11"},
    {EM_68HC08, "Motorola MC68HC08"},
    {EM_68HC05, "Motorola MC68HC05"},
    {EM_SVX, "Silicon Graphics SVx"},
    {EM_ST19, "STMicroelectronics ST19"},
    {EM_VAX, "Digital VAX"},
    {EM_CRIS, "Axis CRIS"},
    {EM_JAVELIN, "Infineon Javelin"},
    {EM_FIREPATH, "Element 14 FirePath"},
    {EM_ZSP, "LSI Logic ZSP"},
    {EM_MMIX, "Donald Knuth's MMIX"},
    {EM_HUANY, "Harvard HUANY"},
    {EM_PRISM, "SiTera Prism"},
    {EM_AVR, "Atmel AVR"},
    {EM_FR30, "Fujitsu FR30"},
    {EM_D10V, "Mitsubishi D10V"},
    {EM_D30V, "Mitsubishi D30V"},
    {EM_V850, "NEC v850"},
    {EM_M32R, "Mitsubishi M32R"},
    {EM_MN10300, "Matsushita MN10300"},
    {EM_MN10200, "Matsushita MN10200"},
    {EM_PJ, "picoJava"},
    {EM_OPENRISC, "OpenRISC"},
    {EM_ARC_COMPACT, "ARC Compact"},
    {EM_XTENSA, "Tensilica Xtensa"},
    {EM_VIDEOCORE, "Alphamosaic VideoCore"},
    {EM_TMM_GPP, "Thompson Multimedia GPP"},
    {EM_NS32K, "National Semi. 32000"},
    {EM_TPC, "Tenor Network TPC"},
    {EM_SNP1K, "Trebia SNP 1000"},
    {EM_ST200, "STMicroelectronics ST200"},
    {EM_IP2K, "Ubicom IP2xxx"},
    {EM_MAX, "MAX processor"},
    {EM_CR, "National Semi. CompactRISC"},
    {EM_F2MC16, "Fujitsu F2MC16"},
    {EM_MSP430, "Texas Instruments MSP430"},
    {EM_BLACKFIN, "Analog Devices Blackfin"},
    {EM_SE_C33, "Seiko Epson S1C33"},
    {EM_SEP, "Sharp embedded"},
    {EM_ARCA, "Arca RISC"},
    {EM_UNICORE, "PKU-Unity"},
    {EM_EXCESS, "eXcess"},
    {EM_DXP, "Icera Semi. DXP"},
    {EM_ALTERA_NIOS2, "Altera Nios II"},
    {EM_CRX, "National Semi. CRX"},
    {EM_XGATE, "Motorola XGATE"},
    {EM_C166, "Infineon C16x/XC16x"},
    {EM_M16C, "Renesas M16C"},
    {EM_DSPIC30F, "Microchip dsPIC30F"},
    {EM_CE, "Freescale Communication Engine"},
    {EM_M32C, "Renesas M32C"},
    {EM_TSK3000, "Altium TSK3000"},
    {EM_RS08, "Freescale RS08"},
    {EM_SHARC, "Analog Devices SHARC"},
    {EM_ECOG2, "Cyan Technology eCOG2"},
    {EM_SCORE7, "Sunplus S+core7"},
    {EM_DSP24, "NJR 24-bit DSP"},
    {EM_VIDEOCORE3, "Broadcom VideoCore III"},
    {EM_LATTICEMICO32, "LatticeMico32"},
    {EM_SE_C17, "Seiko Epson C17"},
    {EM_TI_C6000, "TI TMS320C6000 DSP"},
    {EM_TI_C2000, "TI TMS320C2000 DSP"},
    {EM_TI_C5500, "TI TMS320C55x DSP"},
    {EM_TI_ARP32, "TI App. Specific RISC"},
    {EM_TI_PRU, "TI PRU"},
    {EM_MMDSP_PLUS, "STMicroelectronics 64bit VLIW DSP"},
    {EM_CYPRESS_M8C, "Cypress M8C"},
    {EM_R32C, "Renesas R32C"},
    {EM_TRIMEDIA, "NXP TriMedia"},
    {EM_QDSP6, "QUALCOMM DSP6"},
    {EM_8051, "Intel 8051"},
    {EM_STXP7X, "STMicroelectronics STxP7x"},
    {EM_NDS32, "Andes Tech. NDS32"},
    {EM_ECOG1X, "Cyan Technology eCOG1X"},
    {EM_MAXQ30, "Dallas Semi. MAXQ30"},
    {EM_XIMO16, "NJR 16-bit DSP"},
    {EM_MANIK, "M2000 Reconfigurable RISC"},
    {EM_CRAYNV2, "Cray NV2"},
    {EM_RX, "Renesas RX"},
    {EM_METAG, "Imagination Tech. META"},
    {EM_MCST_ELBRUS, "MCST Elbrus"},
    {EM_ECOG16, "Cyan Technology eCOG16"},
    {EM_CR16, "National Semi. CR16"},
    {EM_ETPU, "Freescale ETPU"},
    {EM_SLE9X, "Infineon SLE9X"},
    {EM_L10M, "Intel L10M"},
    {EM_K10M, "Intel K10M"},
    {EM_AARCH64, "AArch64"},
    {EM_AVR32, "Atmel AVR32"},
    {EM_STM8, "STMicroelectronics STM8"},
    {EM_TILE64, "Tilera TILE64"},
    {EM_TILEPRO, "Tilera TILEPro"},
    {EM_MICROBLAZE, "Xilinx MicroBlaze"},
    {EM_CUDA, "NVIDIA CUDA"},
    {EM_TILEGX, "Tilera TILE-Gx"},
    {EM_CLOUDSHIELD, "CloudShield"},
    {EM_COREA_1ST, "KIPO-KAIST Core-A 1st gen"},
    {EM_COREA_2ND, "KIPO-KAIST Core-A 2nd gen"},
    {EM_ARCV2, "Synopsys ARCv2"},
    {EM_OPEN8, "Open8 RISC"},
    {EM_RL78, "Renesas RL78"},
    {EM_VIDEOCORE5, "Broadcom VideoCore V"},
    {EM_78KOR, "Renesas 78KOR"},
    {EM_56800EX, "Freescale 56800EX DSC"},
    {EM_BA1, "Beyond BA1"},
    {EM_BA2, "Beyond BA2"},
    {EM_XCORE, "XMOS xCORE"},
    {EM_MCHP_PIC, "Microchip PIC"},
    {EM_INTELGT, "Intel Graphics Technology"},
    {EM_KM32, "KM32"},
    {EM_KMX32, "KMx32"},
    {EM_EMX16, "eXcess:16"},
    {EM_EMX8, "eXcess:8"},
    {EM_KVARC, "KVARC"},
    {EM_CDP, "CDP"},
    {EM_COGE, "COGE"},
    {EM_COOL, "COOLEngine"},
    {EM_NORC, "NORC"},
    {EM_CSR_KALIMBA, "CSR Kalimba"},
    {EM_Z80, "Zilog Z80"},
    {EM_VISIUM, "Visium"},
    {EM_FT32, "FTDI Chip FT32"},
    {EM_MOXIE, "Moxie"},
    {EM_AMDGPU, "AMD GPU"},
};

static const LT_Entry type_names[] = {
    {ET_NONE, "No file type"},
    {ET_REL, "Relocatable file"},
    {ET_EXEC, "Executable file"},
    {ET_DYN, "Shared object file"},
    {ET_CORE, "Core file"},
    {ET_LOOS, "OS-specific range start"},
    {ET_HIOS, "OS-specific range end"},
    {ET_LOPROC, "Processor-specific range start"},
    {ET_HIPROC, "Processor-specific range en"},
};

static const LT_Entry osabi_names[] = {
    {ELFOSABI_SYSV, "UNIX - System V"},
    {ELFOSABI_HPUX, "HP-UX"},
    {ELFOSABI_NETBSD, "NetBSD"},
    {ELFOSABI_GNU, "GNU"},
    {ELFOSABI_SOLARIS, "Solaris"},
    {ELFOSABI_AIX, "AIX"},
    {ELFOSABI_IRIX, "IRIX"},
    {ELFOSABI_FREEBSD, "FreeBSD"},
    {ELFOSABI_TRU64, "TRU64 UNIX"},
    {ELFOSABI_MODESTO, "Novell Modesto"},
    {ELFOSABI_OPENBSD, "OpenBSD"},
    {ELFOSABI_ARM_AEABI, "ARM EABI"},
    {ELFOSABI_ARM, "ARM"},
    {ELFOSABI_STANDALONE, "Standalone (embedded) ABI"},
};

void print_elf_ehdr(Arena *arena, void *ehdr);

/* ELF program headers */
static const LT_Entry phdr_type_names[] = {
    {PT_NULL, "NULL"},
    {PT_LOAD, "LOAD"},
    {PT_DYNAMIC, "DYNAMIC"},
    {PT_INTERP, "INTERP"},
    {PT_NOTE, "NOTE"},
    {PT_SHLIB, "SHLIB"},
    {PT_PHDR, "PHDR"},
    {PT_TLS, "TLS"},
    {PT_GNU_EH_FRAME, "GNU_EH_FRAME"},
    {PT_GNU_STACK, "GNU_STACK"},
    {PT_GNU_RELRO, "GNU_RELRO"},
    {PT_GNU_PROPERTY, "GNU_PROPERTY"},
    {PT_GNU_SFRAME, "GNU_SFRAME"},
    {PT_SUNWBSS, "SUNWBSS"},
    {PT_SUNWSTACK, "SUNWSTACK"},
};

void print_elf_phdr(Arena *arena, const void *phdrs, const uint16_t index);
void print_elf_phdrs(Arena *arena, const void *phdrs, const uint16_t phnum);

/* ELF section headers */
static const LT_Entry shdr_type_names[] = {
    {SHT_NULL, "NULL"},
    {SHT_PROGBITS, "PROGBITS"},
    {SHT_SYMTAB, "SYMTAB"},
    {SHT_STRTAB, "STRTAB"},
    {SHT_RELA, "RELA"},
    {SHT_HASH, "HASH"},
    {SHT_DYNAMIC, "DYNAMIC"},
    {SHT_NOTE, "NOTE"},
    {SHT_NOBITS, "NOBITS"},
    {SHT_REL, "REL"},
    {SHT_SHLIB, "SHLIB"},
    {SHT_DYNSYM, "DYNSYM"},
    {SHT_INIT_ARRAY, "INIT_ARRAY"},
    {SHT_FINI_ARRAY, "FINI_ARRAY"},
    {SHT_PREINIT_ARRAY, "PREINIT_ARRAY"},
    {SHT_GROUP, "GROUP"},
    {SHT_SYMTAB_SHNDX, "SYMTAB_SHNDX"},
    {SHT_NUM, "NUM"},
};

void print_elf_shdr(Arena *arena, const void *shdrs, const uint16_t index,
                    const char *shstrtab, const uint64_t shstrtab_size);
void print_elf_shdrs(Arena *arena, const void *shdrs, const uint16_t shnum,
                     const char *shstrtab, const uint64_t shstrtab_size);

/* ELF Static/Dynamic Symbols*/
static const LT_Entry sym_bind_names[] = {
    {STB_LOCAL, "LOCAL"},   {STB_GLOBAL, "GLOBAL"}, {STB_WEAK, "WEAK"},
    {STB_NUM, "NUM"},       {STB_LOOS, "LOOS"},     {STB_HIOS, "HIOS"},
    {STB_LOPROC, "LOPROC"}, {STB_HIPROC, "HIPROC"},
};

static const LT_Entry sym_type_names[] = {
    {STT_NOTYPE, "NOTYPE"},   {STT_OBJECT, "OBJECT"}, {STT_FUNC, "FUNC"},
    {STT_SECTION, "SECTION"}, {STT_FILE, "FILE"},     {STT_COMMON, "COMMON"},
    {STT_TLS, "TLS"},         {STT_NUM, "NUM"},       {STT_LOOS, "LOOS"},
    {STT_HIOS, "HIOS"},       {STT_LOPROC, "LOPROC"}, {STT_HIPROC, "HIPROC"},
};

static const LT_Entry sym_visibility_names[] = {
    {STV_DEFAULT, "DEFAULT"},
    {STV_INTERNAL, "INTERNAL"},
    {STV_HIDDEN, "HIDDEN"},
    {STV_PROTECTED, "PROTECTED"},
};

void print_elf_sym(Arena *arena, const void *syms_ptr, const uint64_t index,
                   const char *strtab, const uint64_t strtab_size);
void print_elf_syms(Arena *arena, const void *syms_ptr,
                    const uint64_t sym_count, const char *strtab,
                    const uint64_t strtab_size, const char *table_name);

/* ELF Dynamic Section*/
static const LT_Entry dyn_tag_names[] = {
    {DT_NULL, "(NULL)"},
    {DT_NEEDED, "(NEEDED)"},
    {DT_PLTRELSZ, "(PLTRELSZ)"},
    {DT_PLTGOT, "(PLTGOT)"},
    {DT_HASH, "(HASH)"},
    {DT_STRTAB, "(STRTAB)"},
    {DT_SYMTAB, "(SYMTAB)"},
    {DT_RELA, "(RELA)"},
    {DT_RELASZ, "(RELASZ)"},
    {DT_RELAENT, "(RELAENT)"},
    {DT_STRSZ, "(STRSZ)"},
    {DT_SYMENT, "(SYMENT)"},
    {DT_INIT, "(INIT)"},
    {DT_FINI, "(FINI)"},
    {DT_SONAME, "(SONAME)"},
    {DT_RPATH, "(RPATH)"},
    {DT_SYMBOLIC, "(SYMBOLIC)"},
    {DT_REL, "(REL)"},
    {DT_RELSZ, "(RELSZ)"},
    {DT_RELENT, "(RELENT)"},
    {DT_PLTREL, "(PLTREL)"},
    {DT_DEBUG, "(DEBUG)"},
    {DT_TEXTREL, "(TEXTREL)"},
    {DT_JMPREL, "(JMPREL)"},
    {DT_BIND_NOW, "(BIND_NOW)"},
    {DT_INIT_ARRAY, "(INIT_ARRAY)"},
    {DT_FINI_ARRAY, "(FINI_ARRAY)"},
    {DT_INIT_ARRAYSZ, "(INIT_ARRAYSZ)"},
    {DT_FINI_ARRAYSZ, "(FINI_ARRAYSZ)"},
    {DT_RUNPATH, "(RUNPATH)"},
    {DT_FLAGS, "(FLAGS)"},
    {DT_ENCODING, "(ENCODING)"},
    {DT_LOOS, "(LOOS)"},
    {DT_HIOS, "(HIOS)"},
    {DT_LOPROC, "(LOPROC)"},
    {DT_HIPROC, "(HIPROC)"},
    {DT_VERSYM, "(VERSYM)"},
    {DT_RELACOUNT, "(RELACOUNT)"},
    {DT_RELCOUNT, "(RELCOUNT)"},
    {DT_FLAGS_1, "(FLAGS_1)"},
    {DT_VERDEF, "(VERDEF)"},
    {DT_VERDEFNUM, "(VERDEFNUM)"},
    {DT_VERNEED, "(VERNEED)"},
    {DT_VERNEEDNUM, "(VERNEEDNUM)"},
    {DT_GNU_HASH, "(GNU_HASH)"},
    {DT_AUXILIARY, "(AUXILIARY)"},
    {DT_FILTER, "(FILTER)"},
};

void print_elf_dynamic(Arena *arena, const ELFInfo *elf);

/* Print whole ELF */
void print_elf(Arena *arena, ELFInfo *elf_ptr);

#endif // ELF_PRINT_H
